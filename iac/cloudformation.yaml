Description: Stack for deploying prod env for nonlegit application.
Parameters:
  LatestAmiId:
    Description: RedHat AMI.
    Type: String
    Default: 'ami-08e637cea2f053dfa'
  KeyPair:
    Description: Existing keypair for the instance.
    Type: AWS::EC2::KeyPair::KeyName 
  ZoneApex:
    Description: 'DNS domain for the hosted zone'
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+\.[a-zA-Z]{2,63}'
  Bucket:
    Description: 'Bucket where your lambda code resides.'
    Type: String
    Default: "iac-nonlegit"
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: prod-vpc
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: prod-igw
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: sn-web-A
  RouteTableWeb: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: rt-web
  RouteTableWebDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref RouteTableWeb
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  RouteTableAssociationWebA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTableWeb
  ElasticIP:
    Type: 'AWS::EC2::EIP'
  EIPAssociation:
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      NetworkInterfaceId: !GetAtt ENI.Id
  ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      Description: ENI with EIP for the instance.
      GroupSet:
      - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: DefaultPublicENI
  PublicEC2:
    Type: AWS::EC2::Instance
    DependsOn:
      - ENI
    Properties:
      InstanceType: "t2.small"
      ImageId: !Ref LatestAmiId
      KeyName: !Ref KeyPair
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref ENI
        DeviceIndex: '0'
      Tags:
        - Key: Name
          Value: prod
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTPs IPv4 IN'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
  DNSZone:
    DependsOn: CheckOwnerOfDomain
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref ZoneApex
  APIRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "api", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt EIP.PublicIp
  WebRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "web", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt EIP.PublicIp
  AppRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "app", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt EIP.PublicIp
  CheckDomainLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "check-domain.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt CheckDomainRole.Arn
  CheckDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: R53ListDomains
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53domains:ListDomains"
            Resource: "*"
  ChangeNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: R53ListDomainsAndUpdateNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53domains:ListDomains"
            - "route53domains:UpdateDomainNameservers"
            Resource: "*"
  ChangeNSLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "change-nameservers.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt ChangeNSRole.Arn
  CheckOwnerOfDomain:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CheckDomainLambda.Arn
      DomainToCheck: !Ref ZoneApex
  ChangeNameServers:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt ChangeNSLambda.Arn
      Domain: !Ref ZoneApex
      NameServers: !GetAtt DNSZone.NameServers