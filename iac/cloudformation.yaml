Description: Stack for deploying prod env for nonlegit application.
Parameters:
  LatestAmiId:
    Description: RedHat AMI.
    Type: String
    Default: 'ami-08e637cea2f053dfa'
  KeyPair:
    Description: Existing keypair for the instance.
    Type: AWS::EC2::KeyPair::KeyName
  ZoneApex:
    Description: 'DNS domain for the hosted zone'
    Type: String
    AllowedPattern: '[a-zA-Z0-9]+\.[a-zA-Z]{2,63}'
  Bucket:
    Description: 'Bucket where your lambda code resides.'
    Type: String
    Default: "iac-nonlegit"
  DropletSSHKeyFingerprint:
    Description: 'Fingerprint of an existing SSH key for the email server droplet'
    Type: String
  DigitalOceanAPIToken:
    Description: 'Your DO API token for creation of the email server droplet'
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.16.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: prod-vpc
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
      - Key: Name
        Value: prod-igw
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.16.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: public-subnet
  PublicRouteTable: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: public-rt
  PublicRouteTableDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway
  PublicRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  ElasticIP:
    Type: 'AWS::EC2::EIP'
  EIPAssociation:
    DependsOn: InternetGatewayAttachment
    Type: AWS::EC2::EIPAssociation
    Properties:
      AllocationId: !GetAtt ElasticIP.AllocationId
      NetworkInterfaceId: !GetAtt ENI.Id
  ENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      SubnetId: !Ref PublicSubnet
      Description: ENI with EIP for the instance.
      GroupSet:
      - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: DefaultPublicENI
  PublicEC2:
    Type: AWS::EC2::Instance
    DependsOn:
      - ENI
    Properties:
      InstanceType: "t2.small"
      ImageId: !Ref LatestAmiId
      IamInstanceProfile: !Ref InstanceProfile
      KeyName: !Ref KeyPair
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      BlockDeviceMappings:
      - DeviceName: "/dev/sda1"
        Ebs:
          VolumeType: gp2
          VolumeSize: 30
          DeleteOnTermination: true
      NetworkInterfaces:
      - NetworkInterfaceId: !Ref ENI
        DeviceIndex: '0'
      Tags:
        - Key: Name
          Value: prod
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          
          cd /home/ec2-user
          yum install nfs-utils git rpm-build make wget -y
          git clone https://github.com/aws/efs-utils
          cd efs-utils
          make rpm
          yum -y install build/amazon-efs-utils*rpm
          cd .. && rm -rf efs-utils

          wget https://bootstrap.pypa.io/get-pip.py -O /tmp/get-pip.py
          python3 /tmp/get-pip.py
          pip3 install botocore

          mkdir -p /var/bind/public
          chown -R ec2-user:ec2-user /var/bind/public
          mount -t efs -o iam,tls,accesspoint=${AccessPoint} ${EFS} /var/bind/public
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
      - PolicyName: EFSDescribeMountTargets
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "elasticfilesystem:DescribeMountTargets"
            Resource: 
            - "*"
      - PolicyName: DNSPermsForCerbot
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53:ListHostedZones"
            - "route53:GetChange"
            Resource: 
            - "*"
          - Effect: Allow
            Action:
            - "route53:ChangeResourceRecordSets"
            Resource: 
            - !Join [ "", [ "arn:aws:route53:::hostedzone/", !GetAtt DNSZone.Id ] ]
      - PolicyName: SecretsAccess
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "secretsmanager:GetSecretValue"
            Resource:
            - "arn:aws:secretsmanager:us-east-1:735026006451:secret:github-credentials-dQQDeh"
            - "arn:aws:secretsmanager:us-east-1:735026006451:secret:db-credentials-WsNMZ5"
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole
  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 IPv4 & v6
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTPs IPv4 IN'
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: '0.0.0.0/0'
  DNSZone:
    DependsOn: CheckOwnerOfDomain
    Type: 'AWS::Route53::HostedZone'
    Properties:
      Name: !Ref ZoneApex
  APIRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "api", ".", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt ElasticIP.PublicIp
  WebRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "web", ".", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt ElasticIP.PublicIp
  AppRoute:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: !Join [ "", [ "app", ".", !Ref ZoneApex ] ]
      Type: "A"
      HostedZoneId: !Ref DNSZone
      TTL: "300"
      ResourceRecords:
        - !GetAtt ElasticIP.PublicIp
  CheckDomainLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "check-domain.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt CheckDomainRole.Arn
  CheckDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: R53ListDomains
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53domains:ListDomains"
            Resource: "*"
  ChangeNSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: R53ListDomainsAndUpdateNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53domains:ListDomains"
            - "route53domains:UpdateDomainNameservers"
            Resource: "*"
  ChangeNSLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "change-nameservers.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt ChangeNSRole.Arn
  CheckOwnerOfDomain:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CheckDomainLambda.Arn
      DomainToCheck: !Ref ZoneApex
  ChangeNameServers:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt ChangeNSLambda.Arn
      Domain: !Ref ZoneApex
      NameServers: !GetAtt DNSZone.NameServers
  EFS:
    Type: AWS::EFS::FileSystem
    Properties:
      AvailabilityZoneName: !Select [ 0, !GetAZs '' ]
      Encrypted: true
      FileSystemTags:
      - Key: Name
        Value: PublicAssestFs
  MountTargetSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: EFS MountTraget sg.
      SecurityGroupIngress:
        - Description: 'Allow NFS traffic in'
          IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          SourceSecurityGroupId: !GetAtt InstanceSecurityGroup.GroupId
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups:
        - !Ref MountTargetSecurityGroup
      SubnetId: !Ref PublicSubnet
  AccessPoint:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref EFS
      PosixUser:
        Gid: '1000'
        Uid: '1000'
      RootDirectory:
        Path: '/backend/public'
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '700'
  ChangeEFSPolicyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: EFSChangePolicy
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "elasticfilesystem:PutFileSystemPolicy"
            - "elasticfilesystem:DeleteFileSystemPolicy"
            Resource: !GetAtt EFS.Arn
  ChangeEFSPolicyLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "change-efs-policy.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt ChangeEFSPolicyRole.Arn
  ChangeEFSPolicyCustom:
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt ChangeEFSPolicyLambda.Arn
      EFSId: !Ref EFS
      EFSArn: !GetAtt EFS.Arn
      AccessPointArn: !GetAtt AccessPoint.Arn
      EC2RoleArn: !GetAtt InstanceRole.Arn
  CreateDropletRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: DeleteRecordsDNS
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53:ChangeResourceRecordSets"
            Resource: 
            - !Join [ "", [ "arn:aws:route53:::hostedzone/", !GetAtt DNSZone.Id ] ]      
      - PolicyName: SSMGetParameter
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "ssm:GetParameter"
            - "ssm:DeleteParameter"
            Resource: 
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", !Join [ "", [ !Ref AWS::StackName, "-", !Ref ZoneApex ] ] ] ]
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", "DropletIP" ] ]
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", "HostedZoneId" ] ]
      - PolicyName: EventsRulesAndTargets
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "events:PutTargets"
            - "events:PutRule"
            - "events:DeleteRule"
            - "events:RemoveTargets"
            Resource: "*"
  CreateDropletLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "create-droplet.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt CreateDropletRole.Arn
      Environment:
        Variables:
          DIGITALOCEAN_API_TOKEN: !Ref DigitalOceanAPIToken
  CreateDroplet:
    DependsOn: DNSZone
    Type: 'AWS::CloudFormation::CustomResource'
    Properties:
      ServiceToken: !GetAtt CreateDropletLambda.Arn
      DropletName: !Ref ZoneApex
      ParameterName: !Join [ "", [ !Ref AWS::StackName, "-", !Ref ZoneApex ] ]
      GetDropletIpFunctionArn: !GetAtt GetDropletIPLambda.Arn
      DropletSSHKey: !Ref DropletSSHKeyFingerprint
  DropletIdParameter:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: !Join [ "", [ !Ref AWS::StackName, "-", !Ref ZoneApex ] ]
      Type: 'String'
      Value: !GetAtt CreateDroplet.DropletId
      Description: "The ID of the create droplet."
  GetDropletIPRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
      - PolicyName: Route53CreateRecord
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "route53:ChangeResourceRecordSets"
            Resource: 
            - !Join [ "", [ "arn:aws:route53:::hostedzone/", !GetAtt DNSZone.Id ] ]
      - PolicyName: SSMGetParameter
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - "ssm:PutParameter"
            - "ssm:GetParameter"
            Resource: 
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", !Join [ "", [ !Ref AWS::StackName, "-", !Ref ZoneApex ] ] ] ]
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", "DropletIP" ] ]
            - !Join [ "", [ "arn:aws:ssm:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":parameter/", "HostedZoneId" ] ]
  GetDropletIPLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref Bucket
        S3Key: "get-droplet-ip.zip"
      Handler: main
      Runtime: go1.x
      Timeout: 30
      Role: !GetAtt GetDropletIPRole.Arn
      Environment:
        Variables:
          DIGITALOCEAN_API_TOKEN: !Ref DigitalOceanAPIToken
  HostedZoneIdParameter:
    Type: 'AWS::SSM::Parameter'
    DeletionPolicy: Retain
    Properties:
      Name: "HostedZoneId"
      Type: 'String'
      Value: !GetAtt DNSZone.Id
      Description: "The ID of the create droplet."
  GetDropletIPPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !GetAtt GetDropletIPLambda.Arn
      Principal: "events.amazonaws.com"
      SourceArn: !Join [ "", [ "arn:aws:events:", !Ref AWS::Region, ":", !Ref AWS::AccountId, ":rule/", !Ref AWS::StackName, "-", !Ref ZoneApex  ] ]
Outputs:
  EIPOutput:
    Description: 'EIP of the instance'
    Value: !GetAtt ElasticIP.PublicIp
  EFSId:
    Description: 'Filesystem id of the EFS'
    Value: !GetAtt EFS.FileSystemId
